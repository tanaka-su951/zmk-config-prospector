# ZMK Custom Config Build Workflow (ZMK公式のセットアップ手順を完全に再現)
# 🚨 これが、Kconfigフリーズと環境問題を回避するための最後の論理的な構成です 🚨

name: Build ZMK Firmware (Official Full Clone)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      board:
        description: 'Target Board (e.g., seeeduino_xiao_ble)'
        required: true
        default: 'seeeduino_xiao_ble'
      shield:
        description: 'Target Shield (e.g., prospector_scanner)'
        required: true
        default: 'prospector_scanner'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMK公式が推奨する、依存関係がすべて設定済みのコンテナを使用
      image: ghcr.io/zmkfirmware/zmk-build-arm:stable
      # コンテナ内で実行する場合、認証エラーを避けるためにcredential-ghcを無効化
      options: --user root

    steps:
    - name: Checkout ZMK Config
      uses: actions/checkout@v4
      with:
        submodules: true  # サブモジュールもチェックアウト
        fetch-depth: 0

    # 1. ZMKコアリポジトリの取得とwest初期化
    - name: Initialize West Workspace
      # コンテナ内で実行されるため、ZMKのパスが /opt/zmk であると想定されます
      run: |
        echo "--- 1. west初期化と依存関係のダウンロード ---"
        # ワークスペースにzmkマニフェストファイルをコピー
        cp /opt/zmk/west.yml west.yml
        # west initは引数なしで実行し、カレントディレクトリのwest.ymlを使用
        west init
        west update
        
    # 2. Python依存関係のインストール
    - name: Install Python Dependencies
      run: |
        echo "--- 2. Python依存関係のインストール ---"
        pip3 install -r /opt/zmk/requirements.txt
        
    # 3. ビルド実行
    - name: Run West Build
      run: |
        echo "--- 3. west build実行（Kconfig回避策不要） ---"
        # ZMKの推奨ビルドスクリプトを実行し、ZMK_CONFIGを現在のワークスペースに設定
        # コンテナ内で実行されるため、Kconfigフリーズの心配はありません
        /opt/zmk/zephyr/scripts/zephyr-export.sh
        
        west build -s /opt/zmk/app -d build --sysbuild \
          -b ${{ github.event.inputs.board }} \
          -- -DSHIELD=${{ github.event.inputs.shield }} \
          -DZMK_CONFIG=${{ github.workspace }}
        
    # 4. 成果物アップロード
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ github.event.inputs.board }}-${{ github.event.inputs.shield }}
        path: build/zephyr/zmk.uf2
