# ZMK Custom Config Build Workflow (SDKインストールとsourceを完全に削除)

name: Build ZMK Firmware (No SDK Install Final)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ZMK Config
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0

    - name: Install Dependencies and Initialize ZMK Core
      run: |
        echo "--- 0. westとPython要件をインストール ---"
        pip install west
        
        echo "--- 1. ZMKコアをmainブランチでクローンし、west初期化 ---"
        rm -rf .west zmk # クリーンアップ
        git clone --depth 1 https://github.com/zmkfirmware/zmk zmk
        
        west init -l .
        west update
        
        echo "--- 2. ZMK Python要件をインストール ---"
        pip install -r zmk/requirements.txt || true

    - name: --- 🚨 ビルド実行 (SDK自動ダウンロードに依存) 🚨 ---
      # 🚨 SDKのインストール、sourceを全て排除。ZMKのツールチェーン自動処理に委ねる 🚨
      run: |
        echo "--- 3. 環境設定とwest buildを同時実行 ---"
        
        # Kconfig対話モードの最終回避策
        export KCONFIG_NONINTERACTIVE=1
        
        # west build実行: SDKがなければ自動的にツールチェーンをダウンロードするはず
        west build -s zmk/app -d build --sysbuild \
          -b seeeduino_xiao_ble \
          -- -DSHIELD=prospector_scanner \
          -DZMK_CONFIG=$GITHUB_WORKSPACE \
          -DCONFIG_BUILD_WITH_CMAKE=n

    # ビルド後の成果物アップロードステップ
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: build/zephyr/zmk.uf2
