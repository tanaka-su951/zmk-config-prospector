name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMK標準ビルド環境コンテナ
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config (as config)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: config # カスタム設定を config ディレクトリにチェックアウト

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        # 1. west init で ZMK のマニフェストを直接使用してワークスペースを初期化
        echo "Initializing west workspace using ZMK's manifest..."
        rm -rf zmk zephyr modules .west
        
        # ZMK の標準マニフェストファイルを指定して初期化
        west init -m https://github.com/zmkfirmware/zmk --mf app/west.yml
        
        # 2. west update で ZMK 本体と Zephyr をクローン
        echo "Updating west modules..."
        west update
        
        # 3. zephyr-exportで必要な環境変数を設定
        echo "Exporting Zephyr environment variables..."
        west zephyr-export
        
        echo "Verifying west environment..."
        west list
      shell: bash
      
    # ★★★ 追加ステップ: ビルド競合ファイルを削除する ★★★
    - name: Remove Root Conflict Files
      run: |
        # ルートリポジトリから衝突するファイル（CMakeLists.txtとKconfig）を削除
        # これにより、west buildがクリーンな状態で起動できる
        echo "Removing conflict files from the root directory."
        rm -f CMakeLists.txt
        rm -f Kconfig
        rm -rf .git
      shell: bash

    - name: Set up Python Environment
      run: |
        /usr/bin/python3 -m venv zmk-env
        source zmk-env/bin/activate

        REQUIREMENTS_FILE=$(find zmk -name "requirements.txt" -print -quit)
        if [ -n "$REQUIREMENTS_FILE" ]; then
          echo "Installing dependencies from: $REQUIREMENTS_FILE"
          pip install -r "$REQUIREMENTS_FILE"
        else
          echo "Warning: requirements.txt not found!"
        fi
        
        # PyYAMLとpykwalifyを明示的にインストールし、環境問題を解消
        echo "Forcibly installing core dependencies (pyyaml, pykwalify)."
        pip install pyyaml pykwalify
      shell: bash

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        # 競合する可能性のある環境変数を全て解除する
        unset ZMK_EXTRA_MODULES
        
        source zmk-env/bin/activate
        
        # 環境変数の設定
        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
        
        rm -rf build/prospector_scanner

        # CONFIG_DIR は新しいパスを参照
        CONFIG_DIR="config"
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
        
        # 設定ファイルの作成
        mkdir -p $SHIELD_DIR
        
        echo "Ensuring ZMK configuration files exist..."
        
        # prj.conf
        echo "# Minimal ZMK config" > "$CONFIG_DIR/prj.conf"
        echo "CONFIG_ZMK_KSCAN_MATRIX=y" >> "$CONFIG_DIR/prj.conf"

        # Shield conf
        echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_DIR/prospector_scanner.conf"

        # Kconfig (シールドKconfigのみ)
        echo '# Kconfig for shield' > "$SHIELD_DIR/Kconfig"
        echo 'config SHIELD_PROSPECTOR_SCANNER' >> "$SHIELD_DIR/Kconfig"
        echo '  bool "Prospector Scanner"' >> "$SHIELD_DIR/Kconfig"
        echo '    default y' >> "$SHIELD_DIR/Kconfig"
        
        echo "=== Starting ZMK Build (via west build with CONFIG_ROOT) ==="
        
        # west build を実行し、ZMKコアアプリをソースとし、
        # CONFIG_ROOT を明示的に指定してカスタム設定を参照させる
        west build -b seeeduino_xiao_ble -d build/prospector_scanner zmk/app -- \
          -DSHIELD=prospector_scanner \
          -DCONFIG_ROOT="$PWD/$CONFIG_DIR"
        
        BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
        UF2_PATH="build/prospector_scanner/zmk.uf2"

        if [ -f "$BIN_PATH" ]; then
          echo "Converting ELF → UF2"
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL: Build failed, zephyr.elf not found."
          ls -R build/prospector_scanner
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        path: build/prospector_scanner/zmk.uf2
