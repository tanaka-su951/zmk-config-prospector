# ZMKファームウェア ビルドワークフロー (環境の不安定性を回避する最終版)

name: Build ZMK Firmware (Final Bash Shell Fix)

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    # 環境変数をすべてのステップで設定
    env:
      # 環境変数 $ZEPHYR_BASE をwestでクローンされた実パスに設定
      ZEPHYR_BASE: ${{ github.workspace }}/zephyr
      
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      - name: Checkout user configuration (Config as Root)
        uses: actions/checkout@v4
        with:
          submodules: false
          
      # 2. ZMK公式ワークスペースの設定と依存関係の更新 (BASHを使用)
      - name: Setup ZMK Workspace and Update Dependencies (BASH SHELL)
        shell: bash
        run: |
          echo "Setting up ZMK workspace..."

          # A. west init/update を実行し、ZephyrとZMK本体をクローン
          west init -l .
          west update --rebase
          
          # B. Zephyr環境スクリプトを読み込み (BASHで実行)
          echo "Sourcing Zephyr environment from: $ZEPHYR_BASE/zephyr-env.sh"
          source "$ZEPHYR_BASE/zephyr-env.sh"
          
      # 3. Build ZMK firmware (cmakeを直接呼び出し、パスを強制注入)
      - name: Build ZMK firmware
        run: |
          echo "Starting CMake build..."
          
          # CMakeを直接呼び出し、Zephyrの設定ファイルパスを強制注入
          # $ZEPHYR_BASE は環境変数として設定済み
          cmake -B build -S zmk/app \
              -GNinja \
              -DBOARD=${{ matrix.board }} \
              -DSHIELD=${{ matrix.shield }} \
              -DZEPHYR_CMAKE_MODULES=$ZEPHYR_BASE/cmake/modules
              
          # Ninjaでビルドを実行
          ninja -C build
        
      # 4. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build' フォルダに出力される
          path: build/zephyr/zephyr.uf2
