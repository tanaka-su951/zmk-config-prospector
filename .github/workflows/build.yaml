name: Build ZMK Firmware (Recommended)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    # 環境変数を定義して、ビルドのコマンドをシンプルにします
    env:
      BOARD: seeeduino_xiao_ble
      SHIELD: prospector_scanner

    steps:
    - name: Checkout ZMK Config and Core
      # ZMK の公式ワークフローでは、リポジトリのルートで
      # ZMK のコア（親リポジトリ）とコンフィグ（子リポジトリ）の両方をチェックアウトします。
      # submodules: recursive で west.yml に指定された ZMK コアも取得します。
      uses: actions/checkout@v4
      with:
        # ZMK の設定ファイルがwest.ymlでZMKコアを参照している場合、recursiveが必須
        submodules: recursive
        fetch-depth: 0

    # 1. Zephyr/ZMK のためのツールチェーンとSDKをセットアップ
    #    これが以前の 'ZephyrConfig.cmake' エラーを解消する最も信頼できる方法です。
    - name: Set up Zephyr/ZMK Build Environment
      uses: zmkfirmware/zmk-build-action@v2
      with:
        # この設定でwest init, west update, pip install -r requirements.txt、
        # および Zephyr SDK の設定がすべて行われます。
        ref: main # 使用したいZMKの安定版ブランチを指定します。

    # 2. ビルド実行
    - name: Build Firmware
      # west build のコマンドはシンプルになります。
      # -b (ボード) と -- -DSHIELD (シールド) のみを指定
      run: |
        echo "--- Building ${BOARD} with ${SHIELD} ---"
        west build -b ${{ env.BOARD }} -- -DSHIELD=${{ env.SHIELD }}

    # 3. 成果物アップロード
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ env.BOARD }}-${{ env.SHIELD }}
        path: build/zephyr/zmk.uf2
        retention-days: 7
