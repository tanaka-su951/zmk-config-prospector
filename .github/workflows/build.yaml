name: Build ZMK Firmware

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. ソースコードをチェックアウト（サブモジュールも再帰的に取得）
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2. 依存関係をインストール
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y git python3-pip ninja-build cmake wget tar unzip curl jq

    # 3. west とその他のPython依存関係をインストール
    - name: Install west and initial Python dependencies
      run: python3 -m pip install --upgrade west setuptools wheel

    # 4. west ワークスペース初期化とモジュール更新
    - name: Initialize west workspace and update modules
      run: |
        # configディレクトリ内のwest.ymlを使用して初期化
        west init -l config
        # Zephyr, ZMK, Toolchainなどをダウンロード
        west update

    # 5. ZMK 固有の Python 依存関係をインストール
    - name: Install ZMK specific Python dependencies
      # 【修正】ZMKモジュール内の要件ファイルを参照する
      run: pip3 install -r zmk/app/requirements.txt

    # 6. Zephyr 環境変数を設定し、ZMK ファームウェアをビルド
    - name: Build ZMK firmware
      run: |
        # 【重要】west topdirを使ってZephyrのインストールパスを取得し、ZEPHYR_BASEを設定
        ZEPHYR_BASE=$(west topdir)/zephyr
        export ZEPHYR_BASE

        # Zephyrの環境変数をエクスポート（ツールチェインパスなどが設定される）
        west zephyr-export

        # 指定されたボードとシールドでZMKファームウェアをビルド
        # -s zmk/app: ZMKモジュール内のアプリケーションソースコードを指定
        west build -s zmk/app -b seeeduino_xiao_ble -- -DSHIELD=prospector_scanner

    # 7. ビルド成果物（ファームウェアファイル）をアーカイブ
    - name: Archive firmware
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble
        # ビルド後の uf2 ファイルのパス
        path: build/zephyr/zmk.uf2
