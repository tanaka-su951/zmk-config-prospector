name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMK標準ビルド環境コンテナ
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config (as config)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: config

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        # 1. west init でワークスペース構造を作成
        echo "Initializing west workspace..."
        rm -rf zmk zephyr modules .west
        west init -l config
        
        # 2. west update で ZMK 本体と Zephyr をクローン
        echo "Updating west modules..."
        west update
        
        # 3. zephyr-exportで必要な環境変数を設定 (buildは不安定なため使用しない)
        echo "Exporting Zephyr environment variables..."
        west zephyr-export
        
        echo "Verifying west environment..."
        west list
      shell: bash

    - name: Debug ZMK Source Location
      run: |
        echo "Workspace structure check:"
        ls -F
        echo "--- ZMK structure ---"
        ls -F zmk || echo "ZMK directory missing"
        echo "--- Zephyr ---"
        ls -F zephyr || echo "Zephyr directory missing"
      shell: bash

    - name: Set up Python Environment
      run: |
        /usr/bin/python3 -m venv zmk-env
        source zmk-env/bin/activate

        REQUIREMENTS_FILE=$(find zmk -name "requirements.txt" -print -quit)
        if [ -n "$REQUIREMENTS_FILE" ]; then
          echo "Installing dependencies from: $REQUIREMENTS_FILE"
          pip install -r "$REQUIREMENTS_FILE"
        else
          echo "Warning: requirements.txt not found!"
        fi
      shell: bash

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        source zmk-env/bin/activate
        
        # 環境変数の設定 (west exportが不十分な場合に備える)
        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
        if [ -z "$ZEPHYR_BASE" ]; then
            export ZEPHYR_BASE="$PWD/zephyr"
        fi
        if [ -z "$CMAKE_PREFIX_PATH" ]; then
            export CMAKE_PREFIX_PATH="$PWD/zephyr/share"
        fi

        echo "ZEPHYR_BASE: $ZEPHYR_BASE"
        echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"

        rm -rf build/prospector_scanner

        CONFIG_DIR="config"
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
        
        # 設定ファイルの作成
        mkdir -p $SHIELD_DIR
        
        echo "Ensuring ZMK configuration files exist..."
        
        # prj.conf
        echo "# Minimal ZMK config" > "$CONFIG_DIR/prj.conf"
        echo "CONFIG_ZMK_KSCAN_MATRIX=y" >> "$CONFIG_DIR/prj.conf"

        # Shield conf
        echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_DIR/prospector_scanner.conf"
        echo '# Shield configs here' >> "$SHIELD_DIR/prospector_scanner.conf"

        # Kconfig (YAMLエラー回避のため echo で出力)
        echo '# Kconfig' > "$SHIELD_DIR/Kconfig"
        echo 'config SHIELD_PROSPECTOR_SCANNER' >> "$SHIELD_DIR/Kconfig"
        echo '  bool "Prospector Scanner"' >> "$SHIELD_DIR/Kconfig"
        echo '  default y' >> "$SHIELD_KCONFIG" # Kconfig の変数を SHIELD_KCONFIG に修正

        # CMakeLists.txt (ZMKアプリの標準ロジックを使用)
        CMAKELIST="$CONFIG_DIR/CMakeLists.txt"
        echo "Overwriting $CMAKELIST"
        echo 'cmake_minimum_required(VERSION 3.20.0)' > "$CMAKELIST"
        echo 'project(zmk-config-prospector LANGUAGES C)' >> "$CMAKELIST"
        echo 'include($ENV{ZEPHYR_BASE}/cmake/app/boilerplate.cmake)' >> "$CMAKELIST"
        
        echo "=== Starting ZMK Build (via cmake/ninja) ==="
        
        # 1. CMake Configure Phase
        /usr/local/bin/cmake \
          -Bbuild/prospector_scanner \
          -GNinja \
          -DBOARD=seeeduino_xiao_ble \
          -DSHIELD=prospector_scanner \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -Sconfig

        # 2. Ninja Compile Phase
        /usr/bin/ninja -C build/prospector_scanner

        BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
        UF2_PATH="build/prospector_scanner/zmk.uf2"

        if [ -f "$BIN_PATH" ]; then
          echo "Converting ELF → UF2"
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL: Build failed, zephyr.elf not found."
          ls -R build/prospector_scanner
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        path: build/prospector_scanner/zmk.uf2
