name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config (as config)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: config

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Clone ZMK Firmware
      run: |
        git clone --depth 1 https://github.com/zmkfirmware/zmk zmk
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        # トップレベルで west workspace を初期化
        west init -m zmk
        west update
        west zephyr-export
      shell: bash

    - name: Force Workspace Cleanup
      run: |
        rm -rf build modules .west
      shell: bash

    - name: Debug ZMK Source Location
      run: |
        echo "Workspace root:"
        ls -F
        echo "zmk/:"
        ls -F zmk
        echo "modules/:"
        ls -F modules || echo "Modules directory not found."
        echo "zephyr/:"
        ls -F zephyr || echo "Zephyr directory not found."
      shell: bash

    - name: Set up Python Environment
      run: |
        python3 -m venv zmk-env
        source zmk-env/bin/activate

        REQUIREMENTS_FILE=$(find zmk -name "requirements.txt" -print -quit)
        if [ -f "$REQUIREMENTS_FILE" ]; then
          echo "Installing requirements from: $REQUIREMENTS_FILE"
          pip install -r "$REQUIREMENTS_FILE"
        else
          echo "No requirements.txt found. Skipping dependency install."
        fi
      shell: bash

    - name: Prepare Config Files
      run: |
        CONFIG_DIR="config"
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
        mkdir -p "$SHIELD_DIR"

        # prj.conf
        PRJ_CONF="$CONFIG_DIR/prj.conf"
        if [ ! -f "$PRJ_CONF" ]; then
          echo "CONFIG_ZMK_KSCAN_MATRIX=y" > "$PRJ_CONF"
        fi
        echo "# Updated at $(date +%s)" >> "$PRJ_CONF"

        # prospector_scanner.conf
        SHIELD_CONF="$SHIELD_DIR/prospector_scanner.conf"
        if [ ! -f "$SHIELD_CONF" ]; then
          echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_CONF"
        fi

        # Kconfig
        SHIELD_KCONFIG="$SHIELD_DIR/Kconfig"
        echo 'config SHIELD_PROSPECTOR_SCANNER' > "$SHIELD_KCONFIG"
        echo '    bool "Prospector Scanner"' >> "$SHIELD_KCONFIG"
        echo '    default y' >> "$SHIELD_KCONFIG"

        # カスタム CMakeLists.txt が存在する場合は削除
        CMAKELIST="$CONFIG_DIR/CMakeLists.txt"
        if [ -f "$CMAKELIST" ]; then
          rm -f "$CMAKELIST"
        fi
      shell: bash

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        source zmk-env/bin/activate

        export ZEPHYR_BASE="$PWD/zephyr"
        export CMAKE_PREFIX_PATH="$PWD/zephyr/share"
        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb

        rm -rf build/prospector_scanner

        west build -s zmk/app -d build/prospector_scanner -b seeeduino_xiao_ble -- \
          -DSHIELD=prospector_scanner \
          -DCMAKE_VERBOSE_MAKEFILE=ON

        BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
        UF2_PATH="build/prospector_scanner/zmk.uf2"

        if [ -f "$BIN_PATH" ]; then
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL ERROR: ELF not found."
          ls -R build/prospector_scanner/
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        path: build/prospector_scanner/zmk.uf2
