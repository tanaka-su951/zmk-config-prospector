# ZMKファームウェア ビルドワークフロー

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # Dockerコンテナを使用しますが、defaults:run は空にしてパス認識を柔軟にします
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. リポジトリをチェックアウト
      # submodules: false に設定し、west update に任せる
      - name: Checkout user configuration
        uses: actions/checkout@v4
        with:
          submodules: false
          
      # 2. 依存関係の初期化、更新、ビルドの実行（全てを config フォルダ内で完結）
      - name: Initialize, Update Dependencies, and Build
        run: |
          # ワークスペースを config フォルダで初期化
          echo "Running west init..."
          west init -l .
          
          # west updateを実行し、zmk/zephyr本体をconfigフォルダ内にクローン
          echo "Running west update..."
          west update --rebase
          
          # ZMKファームウェアのビルドを実行 (ソースは zmk/app)
          echo "Running west build..."
          # self: path: config のため、ビルドはconfigフォルダ内で行う
          west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
          
      # 3. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          # west buildの出力先は config フォルダ内の build です
          name: ${{ matrix.shield }}-${{ matrix.board }}
          path: build/zephyr/zephyr.uf2
