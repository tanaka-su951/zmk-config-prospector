# This workflow uses the stable ZMK Docker image, which includes all necessary tools (west, Python, Zephyr SDK).
# This is the most reliable way to build ZMK firmware.

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # Dockerイメージを直接指定し、すべての依存関係のセットアップをスキップ
    container: zmkfirmware/zmk-build-arm:stable 
    # ホストOSはそのまま
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. リポジトリのチェックアウト (標準アクションでサブモジュールを確実に取得)
      #    このステップはホストOS (ubuntu-latest) 上で実行され、Dockerコンテナにマウントされます
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: true

      # 2. westワークスペース初期化とモジュール更新
      #    コンテナ内で実行。west initは不要で、west updateのみでOK (ZMK Dockerイメージのため)
      - name: Update ZMK modules
        run: west update
        
      # 3. ZMKファームウェアのビルド
      - name: Build ZMK firmware
        run: west build -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}

      # 4. ビルド成果物（ファームウェアファイル）をアーカイブ
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble
          path: build/zephyr/zephyr.uf2
