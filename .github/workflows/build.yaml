# ZMKファームウェア ビルドワークフロー (最も標準的な安定版構成)

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      - name: Checkout user configuration
        uses: actions/checkout@v4
        with:
          submodules: false
          
      # 2. ZMK公式ワークスペースの設定と依存関係の更新
      - name: Setup ZMK Workspace and Update Dependencies
        run: |
          echo "Setting up ZMK official workspace..."
          
          # 2A. 公式のワークスペース west.yml をダウンロードして初期化
          # wgetをcurlに置き換え (-o で出力ファイルを指定)
          curl -sS https://raw.githubusercontent.com/zmkfirmware/zmk/main/app/west.yml -o west.yml
          
          # west init を実行し、ZephyrとZMK本体をクローン
          west init -l .
          west update --rebase
          
          # 2B. ユーザー設定ファイル (現在実行中のリポジトリ) を 'config' フォルダに移動
          # west.yml の self: path: config に対応するため、コンフィグを移動
          mkdir config
          # あなたのリポジトリ内のファイルを config/ に移動します
          mv *.dts* *.overlay* *.keymap* *.c *.h config/ 2>/dev/null || true
          # NOTE: west.yml は ZMK公式のものをダウンロードしてルートに置いているため、移動しません
          
          
      # 3. Build ZMK firmware
      - name: Build ZMK firmware
        # ビルドソースを ZMK の公式アプリパスに指定
        run: |
          echo "Starting west build..."
          # ZMKビルドの標準的なソースパス
          west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
        
      # 4. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build' フォルダに出力される
          path: build/zephyr/zephyr.uf2
