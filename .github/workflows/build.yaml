name: Build Prospector Firmware

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable 
    env:
      ZMK_VERSION: main
      BOARD: seeeduino_xiao_ble

    steps:
      # 1. あなたの設定ファイル（config、modules）をワークスペースのルートにチェックアウト
      - name: Checkout Config Files
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          submodules: 'recursive'
          
      # 2. ZMK コアコードを 'zmk' フォルダにチェックアウト
      - name: Mount ZMK Firmware
        uses: actions/checkout@v4
        with:
          repository: zmkfirmware/zmk
          ref: ${{ env.ZMK_VERSION }}
          path: zmk # ワークスペース直下の zmk/
          submodules: 'recursive'
          
      # 3. West ワークスペースの初期化と依存関係の取得 (新しいステップ)
      - name: Initialize West Workspace
        shell: bash
        working-directory: zmk
        run: |
          west init -l app
          west update
          
      # 4. カスタムモジュールのシンボリックリンク作成
      - name: Create Custom Module Symlink
        shell: bash
        # working-directory を ZMK のルート (zmk/) に変更
        working-directory: zmk 
        run: |
          # ZMKのルートに「app/modules」ディレクトリを作成
          mkdir -p app/modules
          # シンボリックリンクを作成
          ln -s ../../modules/prospector-zmk-module app/modules/prospector-zmk-module
        
      - name: Export Environment Variables
        shell: bash
        run: |
          echo "DTC_INCLUDE_DIRS=${{ github.workspace }}/modules/prospector-zmk-module/dts" >> $GITHUB_ENV
          echo "CONFIG_DIR=${{ github.workspace }}/config" >> $GITHUB_ENV
          
      # 5. ビルドの実行
      - name: Run West Build (prospector_scanner)
        id: west_build_scanner
        shell: bash
        # working-directory を ZMK のルートに設定
        working-directory: zmk
        run: |
          DTC_INCLUDE_PATH="${{ github.workspace }}/modules/prospector-zmk-module/dts" 
          OVERLAY_FILES="${{ github.workspace }}/config/boards/${{ env.BOARD }}.overlay ${{ github.workspace }}/config/prospector_scanner.overlay"

          # -s は app/ を使用し、-d は build/scanner を使用
          west build -s app -d ../build/scanner -b ${{ env.BOARD }} -- \
            -DAPP_LABEL="prospector_scanner" \
            -DDTC_OVERLAY_FILE="${OVERLAY_FILES}" \
            -DDTC_INCLUDE_DIRS="${DTC_INCLUDE_PATH}"

      - name: Run West Build (prospector_adapter)
        id: west_build_adapter
        shell: bash
        # working-directory を ZMK のルートに設定
        working-directory: zmk
        run: |
          DTC_INCLUDE_PATH="${{ github.workspace }}/modules/prospector-zmk-module/dts" 
          OVERLAY_FILES="${{ github.workspace }}/config/boards/${{ env.BOARD }}.overlay ${{ github.workspace }}/config/prospector_adapter.overlay"

          west build -s app -d ../build/adapter -b ${{ env.BOARD }} -- \
            -DAPP_LABEL="prospector_adapter" \
            -DDTC_OVERLAY_FILE="${OVERLAY_FILES}" \
            -DDTC_INCLUDE_DIRS="${DTC_INCLUDE_PATH}"

      - name: Archive Scanner Firmware
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-firmware
          path: build/scanner/zephyr/zmk_prospector_scanner.uf2

      - name: Archive Adapter Firmware
        uses: actions/upload-artifact@v4
        with:
          name: prospector_adapter-firmware
          path: build/adapter/zephyr/zmk_prospector_adapter.uf2
