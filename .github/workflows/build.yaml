name: Build ZMK Firmware

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. ソースコードをチェックアウト（サブモジュールも再帰的に取得）
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2. 依存関係をインストール
    - name: Install dependencies
      run: |
        sudo apt update
        # 必要なツール（git, python, ninja, cmake, wget, tar, curl, jq）をインストール
        sudo apt install -y git python3-pip ninja-build cmake wget tar unzip curl jq

    # 3. west をインストール
    - name: Install west
      run: python3 -m pip install --upgrade west

    # 4. 最新 Zephyr SDK を GitHub リリースから取得・展開・セットアップ
    - name: Download, extract, and setup latest Zephyr SDK
      run: |
        echo "Fetching latest Zephyr SDK release tag..."
        # GitHub APIを使用して最新リリースのタグ名を取得
        ZEPHYR_SDK_TAG=$(curl -s https://api.github.com/repos/zephyrproject-rtos/sdk-ng/releases/latest | jq -r '.tag_name')
        echo "Latest Zephyr SDK tag: $ZEPHYR_SDK_TAG"

        # タグの先頭の 'v' を削除してバージョン番号を抽出
        SDK_VER=${ZEPHYR_SDK_TAG#v}
        
        # ファイル名を構築（アンダースコア '_' を使用）
        FILE_NAME="zephyr-sdk-${SDK_VER}_linux-x86_64.tar.xz"
        
        # x86_64 Linux 用 SDKのダウンロードURLを構築
        SDK_URL="https://github.com/zephyrproject-rtos/sdk-ng/releases/download/${ZEPHYR_SDK_TAG}/${FILE_NAME}"
        echo "Downloading Zephyr SDK from $SDK_URL"
        
        # ファイル名を明示してダウンロード
        wget -O "$FILE_NAME" "$SDK_URL"

        # 展開し、ディレクトリ名を zephyr-sdk に統一
        tar -xf "$FILE_NAME"
        mv zephyr-sdk-${SDK_VER} zephyr-sdk
        
        # 【重要】SDKに含まれるセットアップスクリプトを実行し、環境ファイルを準備
        # これにより、zephyr-env.shなどが生成され、ツールチェインがインストールされます。
        echo "Running Zephyr SDK setup script to finalize installation..."
        ./zephyr-sdk/setup.sh -t all

    # 5. SDKのインストールディレクトリを環境変数に設定し、後のステップで利用できるようにする
    - name: Set SDK Installation Directory
      run: |
        # SDKディレクトリの絶対パスをGITHUB_ENVに保存
        echo "ZEPHYR_SDK_INSTALL_DIR=$PWD/zephyr-sdk" >> $GITHUB_ENV

    # 6. west ワークスペース初期化
    - name: Initialize west workspace
      # ZMKの設定ファイル（configファイル）を元に初期化とモジュール更新を実行
      run: |
        west init -l config
        west update

    # 7. Zephyr 環境変数を設定し、ZMK ファームウェアをビルド
    - name: Build firmware
      # `source` コマンドは `run` ブロックと同じシェルセッションで実行する必要があるため、全てを結合
      run: |
        # SDK環境スクリプトを読み込み、ツールチェインのパスを設定
        source ${{ env.ZEPHYR_SDK_INSTALL_DIR }}/zephyr-env.sh
        
        # westの設定をエクスポート
        west zephyr-export

        # 指定されたボードとシールドでZMKファームウェアをビルド
        west build -s app -b seeeduino_xiao_ble -- -DSHIELD=prospector_scanner
      shell: bash # sourceコマンドが機能するように明示的にbashシェルを使用

    # 8. ビルド成果物（ファームウェアファイル）をアーカイブ
    - name: Archive firmware
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble
        # ビルド後の uf2 ファイルのパス
        path: build/zephyr/zephyr.uf2
