name: Build Prospector Firmware (Shell Script Final)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMK ツールチェーンがプリインストールされた安定の Docker Hub イメージを使用
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
      # 1. ディスク容量のクリーンアップ (安定のため)
      - name: Free Disk Space (Custom)
        run: |
          echo "Removing large packages and caches to free space..."
          rm -rf /usr/local/lib/android
          rm -rf /usr/share/dotnet
          apt clean
          rm -rf /var/lib/apt/lists/*
          echo "Disk space freed."
        shell: bash

      # 2. ZMK と設定をチェックアウト
      - name: Checkout Custom Config
        uses: actions/checkout@v4
        with:
          path: config
      
      - name: Checkout ZMK Repository
        uses: actions/checkout@v4
        with:
          repository: zmkfirmware/zmk
          ref: main 
          path: zmk

      # 3. west 初期化、アップデート、環境変数設定
      - name: Initialize West and Update Modules
        run: |
          CONFIG_DIR="config"

          echo "=== 1. Setup west workspace and west.yml ==="
          
          # west.yml を作成
          cat << EOF > $CONFIG_DIR/west.yml
          manifest:
            remotes:
              - name: zmkfirmware
                url-base: https://github.com/zmkfirmware
            projects:
              - name: zmk
                remote: zmkfirmware
                revision: main
                import: app/west.yml
            self:
              path: config
          EOF

          # west initとupdateを実行
          west init -l $CONFIG_DIR
          west update
          
          echo "=== 2. Export ZMK_CONFIG Path ==="
          # ZMK_CONFIG を環境変数として次ステップに渡す
          echo "ZMK_CONFIG=$PWD/$CONFIG_DIR" >> $GITHUB_ENV
          
        shell: bash

      # 4. ビルド実行とすべてのパスの強制注入
      - name: Perform ZMK Build (FULL Path Injection)
        run: |
          # 環境変数をシェルにエクスポート
          export ZMK_CONFIG="$ZMK_CONFIG" 
          
          # Zephyr環境をsource
          source zephyr/zephyr-env.sh
          
          # すべてのパスを計算
          ZEPHYR_CMAKE_DIR="$PWD/zephyr/share/zephyr-package/cmake"
          ZEPHYR_ROOT_DIR="$PWD/zephyr"
          TOOLCHAIN_VARIANT="gnuarmemb"
          TOOLCHAIN_PATH="/opt/toolchains/gnuarmemb"
          CONFIG_ROOT="$PWD/config" # シールドパス計算用
          
          echo "=== Starting ZMK Build ==="
          
          # すべてのパスを引数として強制注入
          west build -s zmk/app -b seeeduino_xiao_ble -d build/prospector_scanner -- \
            -DSHIELD=prospector_scanner \
            -DSHIELD_DIR="$CONFIG_ROOT/prospector_scanner" \
            -DZephyr_DIR="$ZEPHYR_CMAKE_DIR" \
            -DZEPHYR_BASE="$ZEPHYR_ROOT_DIR" \
            -DZEPHYR_TOOLCHAIN_VARIANT="$TOOLCHAIN_VARIANT" \
            -DGNUARMEMB_TOOLCHAIN_PATH="$TOOLCHAIN_PATH"
          
          echo "=== Convert and Finalize ==="

          BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
          UF2_PATH="build/prospector_scanner/zmk.uf2"

          if [ -f "$BIN_PATH" ]; then
            echo "Converting ELF → UF2"
            python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
          else
            echo "FATAL: Build failed, zephyr.elf not found."
            ls -R build/prospector_scanner
            exit 1
          fi
        shell: bash

      - name: Archive production artifacts (Artifact Upload)
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble-zmk
          path: build/prospector_scanner/zmk.uf2
