name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMK標準ビルド環境コンテナ
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config (as config)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: config

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        west init -m https://github.com/zmkfirmware/zmk --mf app/west.yml
        west update
        echo "Verifying west environment..."
        west list
        west -vv status
      shell: bash

    - name: Force Workspace Cleanup
      run: |
        rm -rf build zmk/.west modules *~
      shell: bash

    - name: Debug ZMK Source Location
      run: |
        echo "Workspace structure check:"
        ls -F
        echo "--- zmk ---"
        ls -F zmk || echo "ZMK directory not found."
        echo "--- modules ---"
        ls -F modules || echo "Modules directory not found."
      shell: bash

    - name: Set up Python Environment
      run: |
        /usr/bin/python3 -m venv zmk-env
        source zmk-env/bin/activate

        REQUIREMENTS_FILE=$(find . -name "requirements.txt" -path "*zmk*" -print -quit || find . -name "requirements.txt" -path "*zmk-config-prospector*" -print -quit || find . -name "requirements.txt" -print -quit)
        if [ -n "$REQUIREMENTS_FILE" ]; then
          echo "Found requirements file at: $REQUIREMENTS_FILE"
          pip install -r "$REQUIREMENTS_FILE"
        else
          echo "Warning: requirements.txt not found. Continuing build."
        fi
      shell: bash

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        source zmk-env/bin/activate
        mkdir -p .west
        echo "[zephyr]" > .west/config
        echo "toolchain-variant = gnuarmemb" >> .west/config

        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
        export ZEPHYR_BASE="$PWD/zephyr"
        export CMAKE_PREFIX_PATH="$PWD/zephyr/share"

        rm -rf build/prospector_scanner

        CONFIG_DIR="config"
        PRJ_CONF="$CONFIG_DIR/prj.conf"
        CMAKELIST="$CONFIG_DIR/CMakeLists.txt"
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
        SHIELD_CONF="$SHIELD_DIR/prospector_scanner.conf"
        SHIELD_KCONFIG="$SHIELD_DIR/Kconfig"

        mkdir -p $SHIELD_DIR

        echo "Ensuring ZMK configuration files exist..."

        # prj.conf
        if [ ! -f "$PRJ_CONF" ]; then
          echo "Creating $PRJ_CONF"
          echo "# Minimum ZMK config" > "$PRJ_CONF"
          echo "CONFIG_ZMK_KSCAN_MATRIX=y" >> "$PRJ_CONF"
        fi
        echo "# Force rebuild at $(date +%s)" >> "$PRJ_CONF"

        # Shield conf
        if [ ! -f "$SHIELD_CONF" ]; then
          echo "Creating $SHIELD_CONF"
          echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_CONF"
          echo '# ZMK shield-specific configs' >> "$SHIELD_CONF"
        fi

        # Kconfig（EOF構文を使わずに echo で安全に出力）
        echo "Creating $SHIELD_KCONFIG"
        echo '# Kconfig: Defines the shield and its options' > "$SHIELD_KCONFIG"
        echo 'config SHIELD_PROSPECTOR_SCANNER' >> "$SHIELD_KCONFIG"
        echo '  bool "Prospector Scanner"' >> "$SHIELD_KCONFIG"
        echo '  default y' >> "$SHIELD_KCONFIG"

        # CMakeLists.txt
        echo "Overwriting $CMAKELIST"
        echo 'cmake_minimum_required(VERSION 3.20.0)' > "$CMAKELIST"
        echo 'project(zmk-config-prospector LANGUAGES C)' >> "$CMAKELIST"
        echo 'find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})' >> "$CMAKELIST"
        echo 'target_sources(app PRIVATE src/main.c)' >> "$CMAKELIST"

        echo "=== Starting ZMK Build ==="
        west build -s zmk/app -d build/prospector_scanner -b seeeduino_xiao_ble -- \
          -DSHIELD=prospector_scanner \
          -DCMAKE_VERBOSE_MAKEFILE=ON

        BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
        UF2_PATH="build/prospector_scanner/zmk.uf2"

        if [ -f "$BIN_PATH" ]; then
          echo "Converting ELF to UF2..."
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL: Build failed, zephyr.elf not found."
          ls -R build/prospector_scanner/
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        path: build/prospector_scanner/zmk.uf2
