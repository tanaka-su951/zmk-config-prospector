# ZMK Custom Config Build Workflow (west.ymlの安定版定義を強制使用)

name: Build ZMK Firmware (West YML Final)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ZMK Config
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0

    - name: Install Dependencies and Initialize ZMK Core
      run: |
        echo "--- 0. westとPython要件をインストール ---"
        pip install west
        
        echo "--- 1. ZMKコアをmainブランチでクローンし、west初期化 ---"
        rm -rf .west zmk # クリーンアップ
        git clone --depth 1 https://github.com/zmkfirmware/zmk zmk
        
        west init -l .
        west update
        
        echo "--- 2. ZMK Python要件をインストール ---"
        pip install -r zmk/requirements.txt || true

    - name: --- 🚨 ツールチェーンの依存関係を安定版で強制更新 🚨 ---
      run: |
        echo "--- 3. west.ymlを安定版から取得し、ツールチェーン定義を追加 ---"
        # 安定版 (zmk-v3.5.0) の west.yml の内容で現在の west.yml を上書き
        # これにより、必要なすべての west 拡張コマンドがロードされる
        curl -s https://raw.githubusercontent.com/zmkfirmware/zmk/zmk-v3.5.0/west.yml > west.yml
        
        echo "--- 4. west updateを再実行して依存関係を解決 ---"
        west update

    - name: --- 🚨 ツールチェーンのインストールと環境設定 🚨 ---
      run: |
        echo "--- 5. 必要なツールチェーンのダウンロードと設定 ---"
        # 安定版のwest.ymlがロードされたため、west toolchain downloadが実行可能になるはず
        west toolchain download

        echo "--- 6. 環境変数設定 ---"
        # Kconfig対話モードの最終回避策
        export KCONFIG_NONINTERACTIVE=1
        
    - name: --- 🚨 ビルド実行 🚨 ---
      run: |
        echo "--- Starting west build ---"
        # ツールチェーンが設定された状態でビルドを実行
        west build -s zmk/app -d build --sysbuild \
          -b seeeduino_xiao_ble \
          -- -DSHIELD=prospector_scanner \
          -DZMK_CONFIG=$GITHUB_WORKSPACE \
          -DCONFIG_BUILD_WITH_CMAKE=n

    # ビルド後の成果物アップロードステップ
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: build/zephyr/zmk.uf2
```eof

---

### 🚀 実行ステップ

1.  GitHub のウェブエディタで、上記のコードを **`.github/workflows/build.yml` に貼り付け、コミット**します。
2.  **実行中のビルドがあればキャンセル**し、GitHub Actions のメニューで、**手動ビルドをトリガー**します。

この修正で、ビルドが成功することを強く期待しています。結果をお知らせください！
