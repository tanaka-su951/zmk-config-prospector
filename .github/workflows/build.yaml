name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config (as config)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: config

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        echo "=== Initializing west workspace ==="
        west init -m https://github.com/zmkfirmware/zmk --mf app/west.yml
        west update
        echo "=== West status ==="
        west list
        west -vv status
      shell: bash

    - name: Prepare Python Environment
      run: |
        echo "=== Setting up Python virtual environment ==="
        python3 -m venv zmk-env
        source zmk-env/bin/activate

        # requirements.txt を安全に探索
        REQUIREMENTS_FILE=$(find . -name "requirements.txt" -path "*zmk/app*" -print -quit)
        if [ -f "$REQUIREMENTS_FILE" ]; then
          echo "Installing requirements from: $REQUIREMENTS_FILE"
          pip install -r "$REQUIREMENTS_FILE"
        else
          echo "Warning: requirements.txt not found, skipping dependency install."
        fi
      shell: bash

    - name: Prepare Config Files
      run: |
        echo "=== Ensuring ZMK configuration files exist ==="
        CONFIG_DIR="config"
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"

        mkdir -p "$SHIELD_DIR"

        # prj.conf
        PRJ_CONF="$CONFIG_DIR/prj.conf"
        if [ ! -f "$PRJ_CONF" ]; then
          echo "Creating config/prj.conf"
          echo "# Minimal ZMK config" > "$PRJ_CONF"
          echo "CONFIG_ZMK_KSCAN_MATRIX=y" >> "$PRJ_CONF"
        fi
        echo "# Updated at $(date +%s)" >> "$PRJ_CONF"

        # prospector_scanner.conf
        SHIELD_CONF="$SHIELD_DIR/prospector_scanner.conf"
        if [ ! -f "$SHIELD_CONF" ]; then
          echo "Creating $SHIELD_CONF"
          echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_CONF"
          echo '# Additional Prospector Scanner settings' >> "$SHIELD_CONF"
        fi

        # Kconfig
        SHIELD_KCONFIG="$SHIELD_DIR/Kconfig"
        echo "Creating $SHIELD_KCONFIG"
        cat <<'EOF' > "$SHIELD_KCONFIG"
config SHIELD_PROSPECTOR_SCANNER
    bool "Prospector Scanner"
    default y
EOF

        # CMakeLists.txt
        CMAKELIST="$CONFIG_DIR/CMakeLists.txt"
        echo "Overwriting $CMAKELIST"
        cat <<'EOF' > "$CMAKELIST"
cmake_minimum_required(VERSION 3.20.0)
project(zmk-config-prospector LANGUAGES C)
find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
target_sources(app PRIVATE src/main.c)
EOF
      shell: bash

    - name: Debug ZMK Source Structure
      run: |
        echo "=== Checking workspace structure ==="
        ls -F
        echo "=== Listing zmk/ and modules/ directories ==="
        ls -F zmk || echo "ZMK directory not found."
        ls -F modules || echo "Modules directory not found."
      shell: bash

    - name: Build Shield: prospector_scanner (seeeduino_xiao_ble)
      run: |
        echo "=== Starting ZMK Build ==="
        source zmk-env/bin/activate

        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
        export ZEPHYR_BASE="$PWD/zephyr"

        west build -s zmk/app -b seeeduino_xiao_ble \
          -- -DSHIELD=prospector_scanner -DZMK_CONFIG="$PWD/config"
      shell: bash

    - name: Upload Firmware Artifact
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner_firmware
        path: build/zephyr/zmk.uf2

      shell: bash

    - name: Archive Firmware (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        path: build/prospector_scanner/zmk.uf2
