name: ZMK Custom Build (Docker Direct)

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMK 公式の Docker イメージを直接利用
    container: ghcr.io/zmkfirmware/zmk-build-arm:stable
    runs-on: ubuntu-latest
    
    # Docker 内でビルドに必要な環境変数を設定
    env:
      ZEPHYR_BASE: /opt/zmk/zephyr
      ZMK_CONFIG: /github/workspace
      
    steps:
      # 1. リポジトリのチェックアウト
      # Docker 環境でもファイルシステムを同期させるために必要
      - name: Checkout ZMK Config
        uses: actions/checkout@v4
        with:
          # ZMK/Zephyr のサブモジュールが含まれているため、fetch-depthは必須
          fetch-depth: 0
      
      # 2. ZMK/Zephyr 環境の初期化と依存関係の取得
      # Docker イメージ内に既にクローン済みのため、west update を実行して依存関係を解決
      - name: Initialize and Update ZMK Workspace
        # ZMK フォルダに移動し、Zephyr の依存関係を更新
        run: |
          cd /opt/zmk
          west update --rebase
          
      # 3. ZMK 環境変数の設定 (Docker内のパスに合わせる)
      - name: Source ZMK Environment
        run: |
          # 環境変数をシェル全体にエクスポート
          source /opt/zmk/zephyr/zephyr-env.sh
          
      # 4. ZMK ファームウェアのビルド
      - name: Build ZMK Firmware
        # ビルドコマンドは Docker 環境内で実行
        run: |
          # ZMK_CONFIG は Docker のデフォルトパス (/github/workspace) に設定されているため、
          # ここにカスタムファイルがあることを ZMK に伝え、ビルドを実行する
          west build -s /opt/zmk/app -d build \
            -b seeeduino_xiao_ble \
            -- -DSHIELD=prospector_scanner \
            -DZMK_CONFIG=/github/workspace
            
      # 5. ビルド成果物のアップロード
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seeeduino_xiao_ble-prospector_scanner
          # ビルド結果のパスは、コンテナ内のビルドディレクトリとボード名に基づきます
          path: build/zephyr/zmk.uf2
          if-no-files-found: error
          retention-days: 7
