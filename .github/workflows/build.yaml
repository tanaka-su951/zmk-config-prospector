name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
      - name: Checkout ZMK Config (as config)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: config # パスを 'config' に変更

      - name: Install Python Venv
        run: |
          apt update
          apt install -y python3.12-venv || apt install -y python3-venv
        shell: bash

      - name: Initialize and Update west workspace
        run: |
          echo "Initializing west workspace using ZMK's manifest..."
          rm -rf zmk zephyr modules .west
          
          # 正しい west.yml の内容を強制的に書き込む
          cat << EOF > config/west.yml
          manifest:
            remotes:
              - name: zmkfirmware
                url-base: https://github.com/zmkfirmware
            projects:
              - name: zmk
                remote: zmkfirmware
                revision: main
                import: app/west.yml
            self:
              path: config
          EOF

          # west init -l config でローカルの west.yml を使用
          west init -l config
          
          echo "Updating west modules..."
          west update
          
          echo "Exporting Zephyr environment variables..."
          west zephyr-export
          
          echo "Verifying west environment..."
          west list
        shell: bash

      - name: Set up Python Environment
        run: |
          /usr/bin/python3 -m venv zmk-env
          source zmk-env/bin/activate

          REQUIREMENTS_FILE=$(find zmk -name "requirements.txt" -print -quit)
          if [ -n "$REQUIREMENTS_FILE" ]; then
            echo "Installing dependencies from: $REQUIREMENTS_FILE"
            pip install -r "$REQUIREMENTS_FILE"
          else
            echo "Warning: requirements.txt not found!"
          fi
          
          pip install pyyaml pykwalify
        shell: bash

      - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
        run: |
          source zmk-env/bin/activate
          
          export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
          
          rm -rf build/prospector_scanner

          CONFIG_DIR="config"
          SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
          
          mkdir -p $SHIELD_DIR
          
          echo "Ensuring ZMK configuration files exist..."
          
          # 過去のデバッグで作成されたカスタムモジュールファイルを全て削除
          rm -rf "$CONFIG_DIR/zephyr"
          rm -f "$CONFIG_DIR/CMakeLists.txt" 
          rm -f "$CONFIG_DIR/Kconfig" # ★★★ config/Kconfig を削除 ★★★
          
          # 1. prj.conf (★★修正★★: Kconfigのsourceを追加)
          CONFIG_PRJ_FILE="$CONFIG_DIR/prj.conf"
          echo "# Minimal ZMK config" > "$CONFIG_PRJ_FILE"
          # カスタムシールド Kconfig への相対パスを prj.conf から source する
          echo 'source "boards/shields/prospector_scanner/Kconfig"' >> "$CONFIG_PRJ_FILE"
          echo "CONFIG_ZMK_KSCAN_MATRIX=y" >> "$CONFIG_PRJ_FILE"

          # 2. Shield conf
          SHIELD_CONF_FILE="$SHIELD_DIR/prospector_scanner.conf"
          echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_CONF_FILE"

          # 3. Shield Kconfig (シールド定義)
          KCONFIG_SHIELD_FILE="$SHIELD_DIR/Kconfig"
          echo '# Kconfig for shield' > "$KCONFIG_SHIELD_FILE"
          echo 'config SHIELD_PROSPECTOR_SCANNER' >> "$KCONFIG_SHIELD_FILE"
          echo '  bool "Prospector Scanner"' >> "$KCONFIG_SHIELD_FILE"
          echo '    default y' >> "$KCONFIG_SHIELD_FILE"
          
          echo "=== Starting ZMK Build (The Simplest Kconfig/Conf Pattern) ==="
          
          # ★★★ 最終のビルドコマンド: EXTRA_KCONFIG_SOURCES を削除 ★★★
          # ZMK は prj.conf から Kconfig をロードし、EXTRA_CONF_FILE で prj.conf とシールド conf を注入
          west build -s zmk/app -b seeeduino_xiao_ble -d build/prospector_scanner -- \
            -DSHIELD=prospector_scanner \
            -DEXTRA_CONF_FILE="$PWD/$CONFIG_PRJ_FILE;$PWD/$SHIELD_CONF_FILE" 
          
          BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
          UF2_PATH="build/prospector_scanner/zmk.uf2"

          if [ -f "$BIN_PATH" ]; then
            echo "Converting ELF → UF2"
            python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
          else
            echo "FATAL: Build failed, zephyr.elf not found."
            ls -R build/prospector_scanner
            exit 1
          fi
        shell: bash

      - name: Archive production artifacts (Artifact Upload)
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble-zmk
          path: build/prospector_scanner/zmk.uf2
