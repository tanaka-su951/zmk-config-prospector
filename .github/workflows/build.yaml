 # ZMKファームウェア ビルドワークフロー (CMakeによる強制ビルド)

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    # 環境変数をすべてのステップで設定
    env:
      # ZMK Dockerコンテナに依存
      ZEPHYR_BASE: /opt/zmk/zephyr
      
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      - name: Checkout user configuration
        uses: actions/checkout@v4
        with:
          submodules: false
          
      # 2. ZMK公式ワークスペースの設定と依存関係の更新
      # west update を実行する前に、環境をセットアップ
      - name: Setup ZMK Workspace and Update Dependencies
        # すべてのコマンドを同じシェルで実行
        run: |
          echo "Setting up ZMK workspace..."
          
          # ZMKの標準的なwest.ymlをルートに配置
          wget https://raw.githubusercontent.com/zmkfirmware/zmk/main/app/west.yml -O west.yml 
          
          # west init を実行 (ZephyrとZMK本体をクローン)
          west init -l .
          west update --rebase
          
          # ユーザー設定ファイル (.dts, .keymapなど) を'config'フォルダに移動
          echo "Moving user files to config/..."
          mkdir -p config
          # あなたのリポジトリ内のファイルを config/ に移動します
          mv *.dts* *.overlay* *.keymap* *.c *.h config/ 2>/dev/null || true
          
          # Zephyr環境スクリプトを読み込み (CMakeに必要)
          source $ZEPHYR_BASE/zephyr-env.sh
          
      # 3. Build ZMK firmware (west build の代わりに cmake を直接呼び出し)
      - name: Build ZMK firmware
        run: |
          echo "Starting CMake build..."
          
          # CMakeを直接呼び出し、ビルドに必要なすべてのパスと設定を渡す
          cmake -B build -S zmk/app \
              -GNinja \
              -DBOARD=${{ matrix.board }} \
              -DSHIELD=${{ matrix.shield }}
              
          # Ninjaでビルドを実行
          ninja -C build
        
      # 4. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build' フォルダに出力される
          path: build/zephyr/zephyr.uf2

