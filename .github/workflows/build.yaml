# ZMK Configuration Repository用の標準ビルドワークフロー
# このワークフローは、リポジトリにカスタム設定ファイル（.keymap, .overlayなど）のみが存在し、
# ZMKとZephyrがサブモジュールとして初期化されることを前提としています。

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  # 手動トリガーを許可
  workflow_dispatch:

jobs:
  build:
    # ZMKの標準的なDocker環境を使用
    runs-on: ubuntu-latest
    container: 
      image: zmkfirmware/zmk-build-arm:stable
      
    steps:
      # 1. リポジトリのチェックアウト（configファイルを取得）
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # 2. ZMK公式リポジトリをサブモジュールとして初期化
      # west init の失敗ログを回避するため、west init は省略し west update のみ実行
      - name: Initialize ZMK Workspace and Download Dependencies
        run: |
          # ZMKリポジトリを初期化し、依存関係をダウンロード
          # ZMKの標準的な依存関係をダウンロードし、ビルド環境を整える
          west update --rebase
          
      # 3. ZMKファームウェアのビルド
      - name: Build ZMK firmware
        run: |
          # west build を zmk/app をソースとして実行
          # カスタム設定ファイル（.keymap, .overlayなど）はリポジトリのルートにある前提で自動的に読み込まれる
          west build -s zmk/app -p \
             -b seeeduino_xiao_ble \
             -- -DSHIELD=prospector_scanner
        
      # 4. ビルド成果物（ファームウェアファイル）をアーカイブ
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble
          # ビルド成果物は build/zephyr/zephyr.uf2 に生成される
          path: build/zephyr/zephyr.uf2
