# ZMK ビルドのための完全手動セットアップ
# 外部アクション/サブモジュールに依存せず、すべての依存関係を手動で設定します。
name: Build ZMK Firmware (Full Manual Setup)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    # すべての環境変数をここで定義し、後続のステップで再利用できるようにします
    env:
      ZMK_CONFIG: ${{ github.workspace }}
      
    steps:
      - name: Checkout ZMK Config
        uses: actions/checkout@v4
        # サブモジュールは手動でクローンするため、無効にします
        with:
          submodules: false
          fetch-depth: 0

      - name: 🛠️ Setup Environment and Tools (Manual)
        id: setup_tools
        run: |
          echo "--- 1. Set environment variables ---"
          # Zephyr SDKのパスを手動で設定します (GitHub Actionsの標準パス)
          # 注: runners-latestイメージに存在するバージョンを使用
          echo "ZEPHYR_SDK_INSTALL_DIR=/home/runner/zephyr-sdk-0.16.5" >> $GITHUB_ENV
          
          # ビルドに必要な依存関係をインストール
          echo "--- 2. Install Python Dependencies ---"
          pip install west cmake ninja 
          
          # CMakeがZMKのファイルを見つけられるよう、シンボリックリンクを作成
          echo "--- 3. Create ZMK-App Symlink (Required for West) ---"
          mkdir -p zmk/app
          # west initが失敗しないよう、ダミーのwest.ymlを作成
          echo "manifest:" > zmk/app/west.yml
          
          # ZMKコアを強制的にクローン (外部依存エラーの回避)
          echo "--- 4. Force Clone ZMK Core ---"
          git clone --depth 1 https://github.com/zmkfirmware/zmk.git zmk_core_repo
          
          # クローンしたリポジトリから必要なファイルをzmk/appに移動
          echo "--- 5. Configure ZMK/West structure (FIXED) ---"
          # エラーの原因となった 'zmk_core_repo/west.yml' の移動を削除しました
          mv zmk_core_repo/app/* zmk/app/
          rm -rf zmk_core_repo
          
          # ZMKのPython要件をインストール（ZMKのrequirements.txtを使用）
          pip install -r zmk/app/requirements.txt || true 

      - name: 🌍 Initialize and Update ZMK Workspace (West)
        id: west_init_update
        run: |
          echo "--- 1. Clean up old artifacts and run west init ---"
          if [ -d ".west" ]; then rm -rf .west; fi
          # ルートのwest.ymlを使って初期化します (あなたのリポジトリのwest.ymlを使用)
          west init -l . 
          
          echo "--- 2. West update to fetch Zephyr and Modules ---"
          # ここでwest.ymlに定義されている全依存関係をクローンします
          west update
          
          echo "--- 3. Set Toolchain Environment (Final Check) ---"
          # westが正しく環境を設定できるように強制的に実行
          source "$HOME/.local/bin/activate" || true
          
      - name: ⚙️ Build ZMK Firmware
        run: |
          echo "--- Start Final Build Command ---"
          
          # ZMKの推奨コマンドでビルドを実行
          west build -s zmk/app -d build -b seeeduino_xiao_ble \
            -- -DSHIELD=prospector_scanner \
            -DZMK_CONFIG=$ZMK_CONFIG

      - name: 📦 Archive Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BOARD }}-firmware
          path: build/zephyr/zmk.uf2

          
      - name: ⚙️ Build ZMK Firmware
        run: |
          echo "--- Start Final Build Command ---"
          
          # ZMKの推奨コマンドでビルドを実行
          # -S: ソースディレクトリ (zmk/app)
          # -d: ビルドディレクトリ (build)
          # -b: ボード名
          # -- : CMakeオプションの区切り文字
          # -DSHIELD: シールド名
          # -DZMK_CONFIG: 設定ファイルのある場所
          west build -s zmk/app -d build -b seeeduino_xiao_ble \
            -- -DSHIELD=prospector_scanner \
            -DZMK_CONFIG=$ZMK_CONFIG

      - name: 📦 Archive Firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BOARD }}-firmware
          path: build/zephyr/zmk.uf2
