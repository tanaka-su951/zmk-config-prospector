# ZMKファームウェア ビルドワークフロー (環境に依存しない単一ステップ構成)

name: Build ZMK Firmware (Integrated Single Step)

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    # 環境変数をすべてのステップで設定
    env:
      APP_DIR: ${{ github.workspace }}
      
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      # サブモジュールをクローンし、west.ymlとconfigフォルダをルートに配置
      - name: Checkout user configuration and ZMK submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          
      # 2. Workspace Initialization and Build (すべてを一つのシェルセッションで実行)
      - name: Initialize, Update, and Build
        run: |
          echo "Forcing workspace initialization and update..."
          
          # ワークスペース初期化と依存関係更新を強制実行
          # west.ymlがルートにあることが前提
          west init -l .
          west update --rebase
          
          echo "Starting west build for ${{ matrix.shield }} on ${{ matrix.board }}"
          # west build を実行 (ソースは zmk/app)
          # west init/update が成功すれば zmk/app は存在します
          west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
          
      # 3. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build/zephyr/zephyr.uf2' に出力されます
          path: build/zephyr/zephyr.uf2
