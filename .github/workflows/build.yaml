# ZMK Custom Config Build Workflow (Manifestファイルを明示的にコピー)

name: Build ZMK Firmware (Manifest Copy Final)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ZMK Config
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0

    - name: Install Dependencies and Initialize ZMK Core
      run: |
        echo "--- 0. westとPython要件をインストール ---"
        pip install west
        
        echo "--- 1. ZMKコアをmainブランチでクローン ---"
        rm -rf .west zmk # クリーンアップ
        git clone --depth 1 https://github.com/zmkfirmware/zmk zmk
        
        echo "--- 2. ZMKコアのwest.ymlをルートにコピー ---"
        # west init のエラーを回避するため、west.ymlを明示的にルートに配置
        cp zmk/west.yml .
        
        echo "--- 3. west初期化と依存関係のダウンロード ---"
        # ルートに west.yml が存在するため、引数なしで実行
        west init
        west update
        
        echo "--- 4. ZMK Python要件をインストール ---"
        pip install -r zmk/requirements.txt || true

    - name: --- 🚨 ツールチェーンのインストールと環境設定 🚨 ---
      run: |
        echo "--- 5. 必要なツールチェーンのダウンロードと設定 ---"
        # west init が成功したため、west toolchain downloadが実行可能になるはずです
        west toolchain download

        echo "--- 6. 環境変数設定 ---"
        # Kconfig対話モードの最終回避策
        export KCONFIG_NONINTERACTIVE=1
        
    - name: --- 🚨 ビルド実行 🚨 ---
      run: |
        echo "--- Starting west build ---"
        # ツールチェーンが設定された状態でビルドを実行します
        west build -s zmk/app -d build --sysbuild \
          -b seeeduino_xiao_ble \
          -- -DSHIELD=prospector_scanner \
          -DZMK_CONFIG=$GITHUB_WORKSPACE \
          -DCONFIG_BUILD_WITH_CMAKE=n

    # ビルド後の成果物アップロードステップ
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: build/zephyr/zmk.uf2
