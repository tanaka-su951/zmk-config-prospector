name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMKの標準ビルド環境コンテナを使用
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    # ... (初期化とセットアップのステップは省略。変更はありません) ...

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        source zmk-env/bin/activate

        # WEST のキャッシュ設定にツールチェーンバリアントを強制的に書き込み
        mkdir -p .west
        echo "[zephyr]" > .west/config
        echo "toolchain-variant = gnuarmemb" >> .west/config
        
        # ZEPHYRのパスを設定
        ZEPHYR_BASE_PATH="$PWD/zephyr"
        ZEPHYR_PREFIX_PATH="$PWD/zephyr/share" 
        
        # 1. 環境変数としてエクスポート
        export ZEPHYR_BASE="$ZEPHYR_BASE_PATH"
        export CMAKE_PREFIX_PATH="$ZEPHYR_PREFIX_PATH"
        export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
        
        # 0. クリーンアップ
        rm -rf build/prospector_scanner

        CONFIG_DIR="config"
        PRJ_CONF="$CONFIG_DIR/prj.conf"
        CMAKELIST="$CONFIG_DIR/CMakeLists.txt"
        
        # ★★★ 修正: Kconfigファイル名を Kconfig に変更 ★★★
        SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
        SHIELD_CONF="$SHIELD_DIR/prospector_scanner.conf"
        SHIELD_KCONFIG="$SHIELD_DIR/Kconfig" 

        # 関連するディレクトリ構造を作成
        mkdir -p $SHIELD_DIR
        echo "Forcing build by ensuring correct files exist in $CONFIG_DIR..."
        
        # 1. prj.conf の作成/変更
        if [ ! -f "$PRJ_CONF" ]; then
          echo "Creating missing $PRJ_CONF with minimum content."
          echo "# Minimum ZMK config to enable compilation" > "$PRJ_CONF"
          echo 'CONFIG_ZMK_KSCAN_MATRIX=y' >> "$PRP_CONF"
        fi
        echo "# Force rebuild at $(date +%s)" >> "$PRJ_CONF"

        # 2. シールド設定ファイルを正しいパスに作成
        if [ ! -f "$SHIELD_CONF" ]; then
          echo "Creating missing shield configuration file: $SHIELD_CONF"
          echo 'CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"' > "$SHIELD_CONF"
          echo '# ZMK shield specific configs go here' >> "$SHIELD_CONF"
        fi
        
        # 3. Kconfig を作成してシールドを有効化
        echo "Creating missing Kconfig file: $SHIELD_KCONFIG"
        cat <<EOF > "$SHIELD_KCONFIG"
# Kconfig: Defines the shield and its options
config SHIELD_PROSPECTOR_SCANNER
    bool "Prospector Scanner"
    default y
EOF
        
        # 4. CMakeLists.txt の正しい内容で上書き/作成
        echo "Overwriting $CMAKELIST with minimal ZMK app include."
        echo "cmake_minimum_required(VERSION 3.20.0)" > "$CMAKELIST"
        echo "project(zmk-config-prospector LANGUAGES C)" >> "$CMAKELIST"
        echo "include($ZEPHYR_BASE_PATH/cmake/app/boilerplate.cmake)" >> "$CMAKELIST"
        
        # 5. Configuration/Setup phase (設定のみ)
        echo "Bypassing 'west build' and executing 'cmake' directly."
        /usr/local/bin/cmake \
          -Bbuild/prospector_scanner \
          -GNinja \
          -DBOARD=seeeduino_xiao_ble \
          -DSHIELD=prospector_scanner \
          -DZEPHYR_BASE="$ZEPHYR_BASE_PATH" \
          -DCMAKE_PREFIX_PATH="$ZEPHYR_PREFIX_PATH" \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -Sconfig
          
        # 6. Compilation phase (コンパイル実行)
        echo "Bypassing 'west build -t all' and executing 'ninja' directly."
        /usr/bin/ninja -C build/prospector_scanner
          
        # 7. UF2 conversion
        BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
        UF2_PATH="build/prospector_scanner/zmk.uf2"
        
        if [ -f "$BIN_PATH" ]; then
          echo "Found ELF file: $BIN_PATH. Starting UF2 conversion..."
          # ZMKに含まれる uf2conv.py スクリプトを実行し、zmk.uf2 を生成
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL ERROR: FINAL ELF file not found. The firmware build failed."
          echo "Listing contents of build directory for final debugging:"
          ls -R build/prospector_scanner/
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        # 最終パス: build/prospector_scanner/zmk.uf2 をアップロード
        path: build/prospector_scanner/zmk.uf2
