# ZMKビルドの最終安定版。ホストOSでチェックアウトを完了させてからDockerコンテナを使用します。

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    # ワークフロー全体でデフォルトの作業ディレクトリを設定
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        
    # ホストOSでチェックアウトを処理
    runs-on: ubuntu-latest
    
    # Dockerコンテナを使用
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. リポジトリのチェックアウトとサブモジュールの取得
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          path: config # リポジトリ全体を 'config' フォルダにチェックアウト

      # 2. westワークスペースを明示的に初期化し、モジュールを更新 (west.ymlをルートに移動)
      - name: Initialize and Update ZMK modules
        working-directory: config
        run: |
          # 💥 最終パス修正: west.ymlをビルド実行前にルートに戻す
          mv west.yml ..
          cd ..
          # 過去の不完全なZMKクローンを削除してクリーンアップ
          rm -rf zmk
          west init -l .
          west update --rebase
          # 💥 追加: ファイルシステムが安定するのを待つ
          sleep 5
        
      # 3. ZMKファームウェアのビルド
      # 💥 最終修正: west updateの実行場所がルートになったため、ビルドもルートで行う
      - name: Build ZMK firmware
        run: west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}

      # 4. ビルド成果物（ファームウェアファイル）をアーカイブ
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble
          # ビルド結果のパスを build/zephyr/zephyr.uf2 に戻します (ルートからのパス)
          path: build/zephyr/zephyr.uf2
