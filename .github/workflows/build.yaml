name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
      - name: Checkout ZMK Config (as config)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: config

      - name: Install Python Venv and Dependencies
        run: |
          apt update
          apt install -y python3-venv python3-pip git cmake ninja-build g++ wget xz-utils file make
          apt install -y device-tree-compiler || apt install -y dtc
        shell: bash

      - name: Initialize west workspace
        run: |
          echo "=== Initializing west workspace ==="
          rm -rf .west
          west init -m https://github.com/zmkfirmware/zmk --mf app/west.yml
          west update
          echo "=== West environment initialized ==="
          ls -R zmk || echo "ZMK not found!"
        shell: bash

      - name: Set up Python Environment
        run: |
          /usr/bin/python3 -m venv zmk-env
          source zmk-env/bin/activate

          REQUIREMENTS_FILE=$(find . -name "requirements.txt" -path "*zmk*" -print -quit)
          if [ -n "$REQUIREMENTS_FILE" ]; then
              echo "Installing from $REQUIREMENTS_FILE"
              pip install -r "$REQUIREMENTS_FILE"
          else
              echo "No requirements.txt found, skipping pip install."
          fi
        shell: bash

      - name: Prepare Configuration
        run: |
          source zmk-env/bin/activate
          CONFIG_DIR="config"
          SHIELD_DIR="$CONFIG_DIR/boards/shields/prospector_scanner"
          mkdir -p "$SHIELD_DIR"

          # prj.conf
          if [ ! -f "$CONFIG_DIR/prj.conf" ]; then
            echo "Creating $CONFIG_DIR/prj.conf"
            cat <<'EOF' > "$CONFIG_DIR/prj.conf"
CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"
CONFIG_ZMK_KSCAN_MATRIX=y
CONFIG_ZMK_DISPLAY=y
EOF
          fi

          # shield config
          if [ ! -f "$SHIELD_DIR/prospector_scanner.conf" ]; then
            echo "Creating shield config"
            cat <<'EOF' > "$SHIELD_DIR/prospector_scanner.conf"
CONFIG_ZMK_KEYBOARD_NAME="Prospector Scanner"
EOF
          fi

          # Kconfig
          echo "Creating $SHIELD_DIR/Kconfig"
          cat <<'EOF' > "$SHIELD_DIR/Kconfig"
config SHIELD_PROSPECTOR_SCANNER
    bool "Prospector Scanner"
    default y
EOF

          # CMakeLists.txt
          echo "Overwriting $CONFIG_DIR/CMakeLists.txt"
          cat <<'EOF' > "$CONFIG_DIR/CMakeLists.txt"
cmake_minimum_required(VERSION 3.20.0)
find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
project(zmk-config-prospector)
target_sources(app PRIVATE src/main.c)
EOF
        shell: bash

      - name: Build ZMK Firmware (seeeduino_xiao_ble)
        run: |
          source zmk-env/bin/activate
          export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
          export ZEPHYR_BASE="$PWD/zephyr"

          echo "=== Starting ZMK Build ==="
          west build -s zmk/app -d build/prospector_scanner -b seeeduino_xiao_ble -- \
            -DSHIELD=prospector_scanner \
            -DCMAKE_VERBOSE_MAKEFILE=ON

          echo "=== Build complete, converting to UF2 ==="
          BIN_PATH="build/prospector_scanner/zephyr/zephyr.elf"
          UF2_PATH="build/prospector_scanner/zmk.uf2"

          if [ -f "$BIN_PATH" ]; then
            python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
          else
            echo "ERROR: ELF not found!"
            ls -R build/prospector_scanner || true
            exit 1
          fi
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: prospector_scanner-seeeduino_xiao_ble-zmk
          path: build/prospector_scanner/zmk.uf2
