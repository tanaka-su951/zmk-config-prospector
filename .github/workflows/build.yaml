# ZMKファームウェア ビルドワークフロー (環境の不安定性を回避する最終版)

name: Build ZMK Firmware (Path Verification)

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      - name: Checkout user configuration (Config as Root)
        uses: actions/checkout@v4
        with:
          submodules: false
          
      # 2. ZMKワークスペースの完全なセットアップと診断 (BASH SHELL)
      - name: Setup ZMK Workspace and Update Dependencies (BASH SHELL)
        shell: bash
        run: |
          echo "Setting up ZMK workspace..."

          # A. ZMKの公式 west.yml をダウンロードし、ルートのユーザーのものを上書き
          # これにより、ユーザーのwest.ymlによる予期せぬパス設定をリセットします。
          wget https://raw.githubusercontent.com/zmkfirmware/zmk/main/app/west.yml -O west.yml
          
          # B. west init/update を実行し、ZephyrとZMK本体をクローン
          west init -l .
          west update --rebase
          
          # C. 診断: Zephyrディレクトリの存在と内容を再確認 (クローン成功の最終確認)
          echo "Verifying 'zephyr/' directory contents:"
          ls -al zephyr/
          
      # 3. Build ZMK firmware (west buildを使用)
      - name: Build ZMK firmware (Standard West Build)
        shell: bash
        run: |
          echo "Starting west build..."
          # west build を実行
          west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
        
      # 4. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build' フォルダに出力される
          path: build/zephyr/zephyr.uf2
