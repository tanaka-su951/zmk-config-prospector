# ZMK Custom Config Build Workflow (ZMK公式のセットアップスクリプトを使用)

name: Build ZMK Firmware (ZMK Setup Script Final)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ZMK Config
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0

    - name: Install west
      run: pip install west

    - name: Clone ZMK Core and run west init
      run: |
        echo "--- 1. ZMKコアをmainブランチでクローンし、west初期化 ---"
        rm -rf .west zmk # クリーンアップ
        git clone --depth 1 https://github.com/zmkfirmware/zmk zmk
        west init -l .
        west update

    # 🚨 究極の環境セットアップ: ZMKの公式セットアップスクリプトを使用 🚨
    # これがSDK、Python依存関係、環境変数をすべて非対話で設定するはずです。
    - name: Setup Zephyr/ZMK Environment
      run: |
        echo "--- Running ZMK/Zephyr setup.sh script ---"
        # 対話モードを避けるため、環境変数を設定してスクリプトを実行
        export KCONFIG_NONINTERACTIVE=1
        
        # ZMKコア内の公式セットアップスクリプトを実行
        # これがSDKのダウンロードと環境設定を処理します
        zmk/scripts/setup.sh
    
    - name: --- 🚨 ビルド実行 🚨 ---
      # ZMKのセットアップスクリプトによって環境変数が設定されているはずなので、west buildを実行
      run: |
        echo "--- Starting west build ---"
        # Kconfig対話モードを避けるための最終防衛線
        export KCONFIG_NONINTERACTIVE=1
        
        west build -s zmk/app -d build --sysbuild \
          -b seeeduino_xiao_ble \
          -- -DSHIELD=prospector_scanner \
          -DZMK_CONFIG=$GITHUB_WORKSPACE \
          -DCONFIG_BUILD_WITH_CMAKE=n

    # ビルド後の成果物アップロードステップ
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware
        path: build/zephyr/zmk.uf2
