name: Build Prospector Firmware (Local)

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # ZMKの標準ビルド環境コンテナを使用
      image: zmkfirmware/zmk-build-arm:stable
      options: --user root

    steps:
    - name: Checkout ZMK Config and Module
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Python Venv
      run: |
        apt update
        apt install -y python3.12-venv || apt install -y python3-venv
      shell: bash

    - name: Initialize and Update west workspace
      run: |
        # ZMKリポジトリ内のマニフェストファイル (app/west.yml) を明示的に指定
        west init -m https://github.com/zmkfirmware/zmk --mf app/west.yml
        west update
      shell: bash

    # ワークスペースに残るキャッシュや一時ファイルを完全に削除
    - name: Force Workspace Cleanup
      run: |
        rm -rf build zmk/.west modules *~
      shell: bash

    - name: Debug ZMK Source Location
      run: |
        echo "Listing contents of workspace root:"
        ls -F
        echo "Listing contents of zmk/ (if exists):"
        ls -F zmk || echo "ZMK directory not found, check west.yml configuration."
        echo "Listing contents of modules/ (if exists):"
        ls -F modules || echo "Modules directory not found, check west.yml configuration."
      shell: bash
      
    - name: Set up Python Environment
      run: |
        /usr/bin/python3 -m venv zmk-env
        source zmk-env/bin/activate
        
        # ZMKの依存関係をインストール
        REQUIREMENTS_FILE=$(find . -name "requirements.txt" -path "*zmk*" -print -quit || find . -name "requirements.txt" -print -quit)
        if [ -n "$REQUIREMENTS_FILE" ]; then
            echo "Found requirements file at: $REQUIREMENTS_FILE"
            pip install -r "$REQUIREMENTS_FILE"
        else
            echo "Warning: requirements.txt not found. Continuing build in case dependencies are pre-installed."
        fi
      shell: bash

    - name: Build Shield:prospector_scanner (seeeduino_xiao_ble)
      run: |
        source zmk-env/bin/activate
        west zephyr-export
        
        # 1. west build で設定とコンパイルを実行 (ビルドを確実に行うため -t all は別コマンドに分離)
        west build -s . -d build/prospector_scanner -b seeeduino_xiao_ble -- \
          -DSHIELD="prospector_scanner" \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
        # 2. ビルドがスキップされないように、明示的に all ターゲットを実行
        west build -d build/prospector_scanner -t all
        
        # 3. 生成された .bin ファイルを見つけ出し、uf2conv.py を使用して変換
        # ★★★ 最終修正: uf2conv.py のパスを正しい ZMK 内部のパス (zmk/tools/) に修正 ★★★
        BIN_PATH="build/prospector_scanner/zephyr/zephyr.bin"
        UF2_PATH="build/prospector_scanner/zmk.uf2"
        
        if [ -f "$BIN_PATH" ]; then
          echo "Found binary file: $BIN_PATH. Starting UF2 conversion..."
          # ZMKに含まれる uf2conv.py スクリプトを実行し、zmk.uf2 を生成
          python3 zmk/tools/uf2conv.py "$BIN_PATH" -c -o "$UF2_PATH"
        else
          echo "FATAL ERROR: Binary file not found at $BIN_PATH."
          echo "Listing contents of build directory for final debugging:"
          # デバッグ情報として、ディレクトリ構造全体を出力
          ls -R build/prospector_scanner/
          exit 1
        fi
      shell: bash

    - name: Archive production artifacts (Artifact Upload)
      uses: actions/upload-artifact@v4
      with:
        name: prospector_scanner-seeeduino_xiao_ble-zmk
        # 最終パス: build/prospector_scanner/zmk.uf2 をアップロード
        path: build/prospector_scanner/zmk.uf2
