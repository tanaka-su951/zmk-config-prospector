# ZMKファームウェア ビルドワークフロー (環境の不安定性を回避する最終版)

name: Build ZMK Firmware

on:
  push:
    branches: [ main ]
    
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  build:
    # ZMKビルド用Dockerコンテナを使用
    runs-on: ubuntu-latest
    container: zmkfirmware/zmk-build-arm:stable
    
    strategy:
      matrix:
        board: [seeeduino_xiao_ble]
        shield: [prospector_scanner]
        
    steps:
      # 1. ユーザー設定リポジトリをチェックアウト
      - name: Checkout user configuration (This repo)
        uses: actions/checkout@v4
        with:
          path: user-config # ユーザー設定ファイルを 'user-config' フォルダにチェックアウト
          
      # 2. ZMK本体リポジトリをチェックアウトし、west.ymlを取得
      - name: Get ZMK's official west.yml
        uses: actions/checkout@v4
        with:
          repository: zmkfirmware/zmk
          path: zmk-source # ZMKリポジトリを 'zmk-source' フォルダにチェックアウト
          
      # 3. ZMK公式ワークスペースの設定と依存関係の更新
      - name: Setup ZMK Workspace and Update Dependencies
        # すべてのコマンドを同じシェルで実行
        run: |
          echo "Setting up ZMK official workspace..."
          
          # A. ZMKの公式 west.yml をルートにコピー
          cp zmk-source/app/west.yml .
          
          # B. west init を実行し、ZephyrとZMK本体をクローン
          # ユーザー設定リポジトリのプロジェクトは west.yml にないため、まだこのステップではクローンされない
          west init -l .
          west update --rebase
          
          # C. ユーザー設定ファイル (user-configフォルダ内のもの) を'config'フォルダに移動
          echo "Moving user files to config/..."
          
          # ユーザー設定リポジトリの内容をルートに移動
          mv user-config/* . 2>/dev/null || true
          rm -rf user-config # 不要になったフォルダを削除

          # ユーザーの west.yml に記載の self: path: config に対応するため、
          # ビルド関連ファイルを config フォルダに移動
          mkdir -p config
          mv *.dts* *.overlay* *.keymap* *.c *.h config/ 2>/dev/null || true
          
      # 4. Build ZMK firmware
      - name: Build ZMK firmware
        # ビルドソースを ZMK の公式アプリパスに指定
        run: |
          echo "Starting west build..."
          # ZMKビルドの標準的なソースパス
          west build -s zmk/app -p -b ${{ matrix.board }} -- -DSHIELD=${{ matrix.shield }}
        
      # 5. Archive firmware
      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.shield }}-${{ matrix.board }}
          # ビルド成果物はルートの 'build' フォルダに出力される
          path: build/zephyr/zephyr.uf2
